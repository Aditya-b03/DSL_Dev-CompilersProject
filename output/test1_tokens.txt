comment: $ sementic checks $
datatype: int
identifier: main
brackets: (
brackets: )
brackets: {
datatype: int
identifier: a
operator: =
constant: 0
punctuation: ;
datatype: int
identifier: b
operator: =
constant: 1
punctuation: ;
datatype: int
identifier: c
operator: =
identifier: a
operator: +
identifier: b
punctuation: ;
datatype: float
identifier: d
operator: =
constant: 0.0
punctuation: ;
datatype: float
identifier: e
operator: =
constant: 1.0
punctuation: ;
datatype: float
identifier: f
operator: =
identifier: d
operator: +
identifier: e
punctuation: ;
datatype: string
identifier: g
operator: =
constant: "hello"
punctuation: ;
datatype: string
identifier: h
operator: =
constant: "world"
punctuation: ;
datatype: string
identifier: i
operator: =
identifier: g
operator: +
identifier: h
punctuation: ;
datatype: bool
identifier: j
operator: =
datatype: TRUE
punctuation: ;
datatype: bool
identifier: k
operator: =
datatype: FALSE
punctuation: ;
reserved: list
brackets: [
brackets: ]
brackets: [
brackets: ]
punctuation: :
datatype: int
identifier: l
operator: =
brackets: {
brackets: {
constant: 1
punctuation: ,
constant: 2
punctuation: ,
constant: 3
brackets: }
punctuation: ,
brackets: {
constant: 4
punctuation: ,
constant: 5
punctuation: ,
constant: 6
brackets: }
brackets: }
punctuation: ;
reserved: list
brackets: [
brackets: ]
brackets: [
brackets: ]
punctuation: :
datatype: int
identifier: m
operator: =
brackets: {
brackets: {
constant: 1.0
punctuation: ,
constant: 2.0
punctuation: ,
constant: 3.0
brackets: }
punctuation: ,
brackets: {
constant: 4.0
punctuation: ,
constant: 5.0
punctuation: ,
constant: 6.0
brackets: }
brackets: }
punctuation: ;
reserved: list
brackets: [
brackets: ]
brackets: [
brackets: ]
punctuation: :
datatype: string
identifier: n
operator: =
brackets: {
brackets: {
constant: "hello"
punctuation: ,
constant: "world"
brackets: }
punctuation: ,
brackets: {
constant: "hello"
punctuation: ,
constant: "world"
brackets: }
brackets: }
punctuation: ;
reserved: if
brackets: (
identifier: a
operator: >=
identifier: b
brackets: )
brackets: {
identifier: a
operator: =
constant: 1
punctuation: ;
brackets: }
reserved: else
brackets: {
identifier: a
operator: =
constant: 2
punctuation: ;
brackets: }
reserved: if
brackets: (
identifier: a
brackets: )
brackets: {
identifier: print
brackets: (
constant: "hello"
brackets: )
punctuation: ;
brackets: }
reserved: while
brackets: (
identifier: a
operator: <
constant: 10
brackets: )
brackets: {
identifier: a
operator: =
identifier: a
operator: +
constant: 1
punctuation: ;
brackets: }
reserved: return
constant: 0
punctuation: ;
brackets: }

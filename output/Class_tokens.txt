reserved: class
identifier: Home
brackets: {
reserved: public
punctuation: :
datatype: team
identifier: family
punctuation: ;
datatype: team
identifier: relatives
punctuation: ;
datatype: team
identifier: friends
punctuation: ;
datatype: team
identifier: colleagues
punctuation: ;
datatype: team
identifier: neighbours
punctuation: ;
datatype: void
identifier: init
brackets: (
brackets: )
brackets: {
reserved: self
punctuation: .
identifier: family
operator: =
identifier: create_team
brackets: (
constant: "family"
punctuation: ,
constant: "Happy Family"
brackets: )
punctuation: ;
reserved: self
punctuation: .
identifier: relatives
operator: =
identifier: create_team
brackets: (
constant: "relatives"
punctuation: ,
constant: "Relatives"
brackets: )
punctuation: ;
reserved: self
punctuation: .
identifier: friends
operator: =
identifier: create_team
brackets: (
constant: "friends"
punctuation: ,
constant: "cool friends"
brackets: )
punctuation: ;
reserved: self
punctuation: .
identifier: colleagues
operator: =
identifier: create_team
brackets: (
constant: "colleagues"
punctuation: ,
constant: "lets work"
brackets: )
punctuation: ;
reserved: self
punctuation: .
identifier: neighbours
operator: =
identifier: create_team
brackets: (
constant: "neighbours"
punctuation: ,
constant: "loser neighbours"
brackets: )
punctuation: ;
brackets: }
datatype: void
identifier: init
brackets: (
datatype: team
identifier: family
punctuation: ,
datatype: team
identifier: relatives
punctuation: ,
datatype: team
identifier: friends
punctuation: ,
datatype: team
identifier: colleagues
punctuation: ,
datatype: team
identifier: neighbours
brackets: )
brackets: {
reserved: self
punctuation: .
identifier: family
operator: =
identifier: family
punctuation: ;
reserved: self
punctuation: .
identifier: relatives
operator: =
identifier: relatives
punctuation: ;
reserved: self
punctuation: .
identifier: friends
operator: =
identifier: friends
punctuation: ;
reserved: self
punctuation: .
identifier: colleagues
operator: =
identifier: colleagues
punctuation: ;
reserved: self
punctuation: .
identifier: neighbours
operator: =
identifier: neighbours
punctuation: ;
brackets: }
datatype: void
identifier: addPerson
brackets: (
datatype: member
identifier: p
punctuation: ,
datatype: string
identifier: relation
brackets: )
brackets: {
reserved: if
brackets: (
identifier: relation
operator: is
constant: "family"
brackets: )
brackets: {
identifier: family
punctuation: .
identifier: insert
brackets: (
identifier: p
brackets: )
punctuation: ;
brackets: }
reserved: else
reserved: if
brackets: (
identifier: relation
operator: is
constant: "relatives"
brackets: )
brackets: {
identifier: relatives
punctuation: .
identifier: insert
brackets: (
identifier: p
brackets: )
punctuation: ;
brackets: }
reserved: else
reserved: if
brackets: (
identifier: relation
operator: is
constant: "friends"
brackets: )
brackets: {
identifier: friends
punctuation: .
identifier: insert
brackets: (
identifier: p
brackets: )
punctuation: ;
brackets: }
reserved: else
reserved: if
brackets: (
identifier: relation
operator: is
constant: "colleagues"
brackets: )
brackets: {
identifier: colleagues
punctuation: .
identifier: insert
brackets: (
identifier: p
brackets: )
punctuation: ;
brackets: }
reserved: else
reserved: if
brackets: (
identifier: relation
operator: is
constant: "neighbours"
brackets: )
brackets: {
identifier: neighbours
punctuation: .
identifier: insert
brackets: (
identifier: p
brackets: )
punctuation: ;
brackets: }
reserved: else
brackets: {
identifier: print
brackets: (
constant: "Invalid Relation\n"
brackets: )
punctuation: ;
brackets: }
brackets: }

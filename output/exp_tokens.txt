reserved: #include
constant: "teamScibe.h"
comment: $checks$
datatype: int
identifier: sum1
brackets: (
datatype: int
identifier: d
punctuation: ,
datatype: string
identifier: s
brackets: )
brackets: {
identifier: d
operator: ++
punctuation: ;
reserved: return
identifier: d
punctuation: ;
brackets: }
datatype: string
identifier: gen_ID
brackets: (
brackets: )
brackets: {
datatype: string
identifier: s
operator: =
constant: ""
punctuation: ;
reserved: for
brackets: (
datatype: int
identifier: i
operator: =
constant: 0
punctuation: ;
identifier: i
operator: <
constant: 10
punctuation: ;
identifier: i
operator: ++
brackets: )
brackets: {
brackets: }
reserved: return
identifier: s
punctuation: ;
brackets: }
datatype: int
identifier: sum2
brackets: (
datatype: int
identifier: A
punctuation: ,
datatype: int
identifier: B
brackets: )
brackets: {
reserved: return
constant: 0
punctuation: ;
brackets: }
reserved: class
identifier: abd
brackets: {
datatype: int
identifier: y
punctuation: ;
datatype: float
identifier: mul
brackets: (
datatype: float
identifier: b
brackets: )
brackets: {
identifier: b
operator: =
identifier: b
operator: -
constant: 1
punctuation: ;
reserved: return
identifier: b
punctuation: ;
brackets: }
brackets: }
punctuation: ;
reserved: class
identifier: abc
brackets: {
datatype: int
identifier: x
punctuation: ;
datatype: int
identifier: diff
brackets: (
datatype: int
identifier: c
brackets: )
brackets: {
reserved: self
punctuation: .
identifier: x
operator: =
reserved: self
punctuation: .
identifier: x
operator: +
constant: 1
punctuation: ;
reserved: return
constant: 0
punctuation: ;
brackets: }
brackets: }
punctuation: ;
identifier: abd
identifier: damn
brackets: (
datatype: int
identifier: x
punctuation: ,
datatype: int
identifier: y
brackets: )
brackets: {
identifier: abc
identifier: obj
punctuation: ;
reserved: return
identifier: obj
punctuation: ;
brackets: }
datatype: int
identifier: main
brackets: (
brackets: )
brackets: {
datatype: string
identifier: x
operator: =
constant: "hello"
punctuation: ;
datatype: bool
identifier: y
punctuation: ;
identifier: y
operator: =
identifier: x
operator: >
identifier: x
punctuation: ;
identifier: y
operator: =
operator: not
identifier: y
punctuation: ;
identifier: abd
identifier: obb
punctuation: ;
datatype: float
identifier: check
operator: =
identifier: obb
punctuation: .
identifier: mul
brackets: (
constant: 1.0
brackets: )
punctuation: ;
comment: $list[2][][]: string names;$
reserved: return
constant: 0
punctuation: ;
brackets: }
